#!/usr/bin/env python3
from pathlib import Path
import ipaddress

# üëâ –£–∫–∞–∂–∏ —Ç—É—Ç –ø–∞–ø–∫–∏ –≤–Ω—É—Ç—Ä–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è, –≥–¥–µ –ª–µ–∂–∞—Ç .lst —Å IP/–ø–æ–¥—Å–µ—Ç—è–º–∏
TARGET_DIRS = [
    "domains/ip",
    # "Subnets/IPv6",
    # "Another/Dir",
]

MAKE_BACKUP = True  # —Å–æ–∑–¥–∞—Ç—å file.bak –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—å—é


def normalize_ip_or_cidr(line: str) -> str | None:
    """
    –ü—Ä–µ–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É —Å IP/–ø–æ–¥—Å–µ—Ç—å—é –≤ –∫–∞–Ω–æ–Ω–∏—á–Ω—ã–π –≤–∏–¥ –¥–ª—è IP-CIDR.
    - bare IPv4  -> x.x.x.x/32
    - bare IPv6  -> xxxx::/128
    - IPv4/IPv6 CIDR –æ—Å—Ç–∞—ë—Ç—Å—è –∫–∞–∫ –µ—Å—Ç—å (–Ω–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç—Å—è ipaddress-–æ–º)
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É 'IP-CIDR,<cidr>,no-resolve' –∏–ª–∏ None, –µ—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –Ω–µ–≤–∞–ª–∏–¥–Ω–∞—è.
    """
    s = line.strip()

    # —É–∂–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ IP-CIDR, –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º/–¥–æ–±–∞–≤–ª—è–µ–º no-resolve
    if s.upper().startswith("IP-CIDR,"):
        body = s.split(",", 1)[1].strip()  # –≤—Å—ë –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–π –∑–∞–ø—è—Ç–æ–π
        # –º–æ–∂–µ—Ç –±—ã—Ç—å "1.2.3.0/24" –∏–ª–∏ "1.2.3.4,no-resolve" ‚Äî –≤—ã–¥–µ–ª–∏–º cidr —á–∞—Å—Ç—å
        parts = [p.strip() for p in body.split(",")]
        cidr_raw = parts[0] if parts else ""
        try:
            # –µ—Å–ª–∏ —ç—Ç–æ —Å–µ—Ç—å ‚Äî –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º; –µ—Å–ª–∏ —ç—Ç–æ IP –±–µ–∑ –º–∞—Å–∫–∏ ‚Äî –¥–æ–±–∞–≤–∏–º /32 –∏–ª–∏ /128
            if "/" in cidr_raw:
                net = ipaddress.ip_network(cidr_raw, strict=False)
                cidr = str(net)
            else:
                ip = ipaddress.ip_address(cidr_raw)
                cidr = f"{ip}/32" if isinstance(ip, ipaddress.IPv4Address) else f"{ip}/128"
            return f"IP-CIDR,{cidr},no-resolve"
        except ValueError:
            return None

    # –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏/–ø—É—Å—Ç—ã–µ ‚Äî –∏–≥–Ω–æ—Ä
    if not s or s.startswith("#"):
        return s  # –≤–µ—Ä–Ω—ë–º –∫–∞–∫ –µ—Å—Ç—å (—Å–æ—Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ —Ñ–∞–π–ª–µ)

    # –ø–æ–ø—Ä–æ–±—É–µ–º –∫–∞–∫ –ø–æ–¥—Å–µ—Ç—å
    try:
        if "/" in s:
            net = ipaddress.ip_network(s, strict=False)
            return f"IP-CIDR,{net},no-resolve"
    except ValueError:
        pass

    # –ø–æ–ø—Ä–æ–±—É–µ–º –∫–∞–∫ –≥–æ–ª—ã–π IP
    try:
        ip = ipaddress.ip_address(s)
        cidr = f"{ip}/32" if isinstance(ip, ipaddress.IPv4Address) else f"{ip}/128"
        return f"IP-CIDR,{cidr},no-resolve"
    except ValueError:
        # –Ω–µ–≤–∞–ª–∏–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ ‚Äî –≤–µ—Ä–Ω—ë–º None, —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å
        return None


def process_lst_file(path: Path) -> tuple[int, int]:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç .lst: –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç (–∏–∑–º–µ–Ω—ë–Ω–Ω—ã—Ö_—Å—Ç—Ä–æ–∫, –≤—Å–µ–≥–æ_—Å—Ç—Ä–æ–∫_–æ—Å—Ç–∞–≤–ª–µ–Ω–æ).
    """
    src_lines = path.read_text(encoding="utf-8", errors="ignore").splitlines()

    out_lines: list[str] = []
    changed = 0
    kept = 0

    for raw in src_lines:
        res = normalize_ip_or_cidr(raw)
        if res is None:
            # –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–≤—Å–µ–º –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ (–Ω–∏ IP, –Ω–∏ CIDR, –Ω–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏)
            continue
        if res == raw:
            out_lines.append(raw)
            kept += 1
        else:
            out_lines.append(res)
            changed += 1

    if MAKE_BACKUP:
        path.with_suffix(path.suffix + ".bak").write_text("\n".join(src_lines), encoding="utf-8")

    path.write_text("\n".join(out_lines) + "\n", encoding="utf-8")
    return changed, kept


def main():
    total_files = 0
    total_changed = 0
    total_kept = 0

    for d in TARGET_DIRS:
        base = Path(d)
        if not base.is_dir():
            print(f"‚ö†Ô∏è –ü–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {d}")
            continue
        for file in base.rglob("*.lst"):
            changed, kept = process_lst_file(file)
            print(f"‚úÖ {file} ‚Äî –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–æ: {changed}, –æ—Å—Ç–∞–≤–ª–µ–Ω–æ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π: {kept}")
            total_files += 1
            total_changed += changed
            total_kept += kept

    print(f"\n–ì–æ—Ç–æ–≤–æ. –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {total_files}, –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–æ —Å—Ç—Ä–æ–∫: {total_changed}, –æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {total_kept}")


if __name__ == "__main__":
    main()
